import os
import csv
import openai
import numpy as np
import pandas as pd
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
from pathlib import Path
from numpy.linalg import norm

app = Flask(__name__)
CORS(app)

openai.api_key = os.getenv("OPENAI_API_KEY")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —Å embedding ===
try:
    kb_path = Path(__file__).resolve().parent / "knowledge_base_with_embeddings.pkl"
    df_kb = pd.read_pickle(kb_path)
    df_kb["embedding"] = df_kb["embedding"].apply(np.array)
    print("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å embedding –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    df_kb = pd.DataFrame(columns=["question", "answer", "embedding"])

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è embedding ===
def get_embedding(text, model="text-embedding-3-small"):
    text = text.replace("\n", " ")
    response = openai.Embedding.create(input=[text], model=model)
    return np.array(response.data[0].embedding)

# === –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ===
def search_similar_questions(question, top_n=3):
    query_emb = get_embedding(question)
    df_kb["similarity"] = df_kb["embedding"].apply(lambda x: np.dot(x, query_emb) / (norm(x) * norm(query_emb)))
    top = df_kb.sort_values("similarity", ascending=False).head(top_n)
    return top["question"].tolist(), top["answer"].tolist(), top["similarity"].tolist()

# === –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç ===
@app.route("/ask", methods=["POST", "OPTIONS"])
def ask():
    if request.method == "OPTIONS":
        response = make_response()
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type"
        return response, 200

    try:
        data = request.get_json()
        user_question = data.get("question", "")
        print("üì• –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user_question)

        try:
            questions, answers, similarities = search_similar_questions(user_question)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ embedding:", e)
            questions, answers, similarities = [], [], []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if similarities and similarities[0] > 0.90:
            best_answer = answers[0]
            answer = f"üí° –û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{best_answer}"
        else:
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT
            context = "\n\n".join([f"–í–æ–ø—Ä–æ—Å: {q}\n–û—Ç–≤–µ—Ç: {a}" for q, a in zip(questions, answers)])
            prompt = f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–∫—É–ø–∫–∞–º –≤ –†–§.\n–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ.\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {user_question}"
            print("üß™ GPT-–ø–æ–∏—Å–∫, —Ç.–∫. —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç...")
            completion = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=400,
                temperature=0.3,
            )
            gpt_answer = completion.choices[0].message.content.strip()
            answer = f"ü§ñ –û—Ç–≤–µ—Ç GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{gpt_answer}"

        response = jsonify({"answer": answer})
        response.headers.add("Access-Control-Allow-Origin", "*")
        return response

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ OpenAI:", e)
        response = jsonify({"error": str(e)})
        response.headers.add("Access-Control-Allow-Origin", "*")
        return response, 500

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ ===
@app.route("/check-key", methods=["GET"])
def check_key():
    try:
        models = openai.models.list()
        return jsonify({"status": "ok", "models": [m.id for m in models.data]})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 401
