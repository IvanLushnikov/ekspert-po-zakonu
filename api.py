import os
import openai
from flask import Flask, request, jsonify
from flask_cors import CORS  # –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç CORS

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Flask –∏ OpenAI ---
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "https://ekspert-po-zakonu.vercel.app"}})  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞
openai.api_key = os.getenv("OPENAI_API_KEY")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ CSV ---
knowledge_base = []
try:
    kb_path = Path(__file__).resolve().parent / "knowledge_base.csv"
    with open(kb_path, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            knowledge_base.append({"question": row["question"], "answer": row["answer"]})
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

# --- –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ ---
def simple_search(user_question):
    results = []
    for item in knowledge_base:
        if user_question.lower() in item["question"].lower():
            results.append(item)
    return results[:3]

# --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è GPT-—á–∞—Ç–∞ ---
@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    user_question = data.get("question", "")
    print("üì• –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user_question)

    context_items = simple_search(user_question)
    context = "\n\n".join([f"–í–æ–ø—Ä–æ—Å: {i['question']}\n–û—Ç–≤–µ—Ç: {i['answer']}" for i in context_items])
    print("üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç:", context)

    if context.strip():
        prompt = f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 44-–§–ó. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n{context}\n\n–í–æ–ø—Ä–æ—Å: {user_question}"
    else:
        prompt = f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 44-–§–ó. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ:\n\n–í–æ–ø—Ä–æ—Å: {user_question}"

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message["content"]
        return jsonify({"answer": answer})
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ OpenAI:", e)
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
